plugins {
  id 'java'
  id "io.freefair.lombok" version "${lombokPluginVersion}"
  id "org.gretty" version "${grettyVersion}"
  id 'war'
  id 'org.jetbrains.kotlin.jvm' version "${kotlinJvmPluginVersion}"
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of("${javaVersion}")
  }
}

[compileJava, compileTestJava]*.options*.encoding = "${projectEncoding}"

repositories {
  mavenCentral()
}


dependencies {
  implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}"

  implementation "org.springframework:spring-context:${springVersion}"
  implementation "org.springframework:spring-webmvc:${springVersion}"
  implementation "org.springframework:spring-jdbc:${springVersion}"

  implementation "org.springframework.security:spring-security-web:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-config:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"

  implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"

  implementation "net.sargue:java-time-jsptags:${javaTimeJspTagsVersion}"

  implementation "org.mybatis:mybatis:${mybatisVersion}"
  implementation "org.mybatis:mybatis-spring:${mybatisSpringVersion}"
  implementation "org.hsqldb:hsqldb:${hsqldbVersion}"

  compileOnly "jakarta.servlet:jakarta.servlet-api:${jakartaServletApiVersion}"
  compileOnly "jakarta.servlet.jsp:jakarta.servlet.jsp-api:${jakartaServletJspApiVersion}"
  runtimeOnly "jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:${jakartaServletJspJstlApiVersion}"
  runtimeOnly "org.glassfish.web:jakarta.servlet.jsp.jstl:${jakartaServletJspJstlVersion}"

  testRuntimeOnly "org.glassfish:jakarta.el:${jakartaElVersion}"

  testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
  testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"

  testImplementation "org.mockito:mockito-core:${mockitoVersion}"
  testImplementation "org.assertj:assertj-core:${assertJVersion}"

  testImplementation "org.springframework:spring-test:${springVersion}"
  testImplementation "org.springframework.security:spring-security-test:${springSecurityVersion}"
  testRuntimeOnly "jakarta.servlet:jakarta.servlet-api:${jakartaServletApiVersion}"

  implementation "org.webjars:jquery:${jqueryVersion}"
  implementation "org.webjars:bootstrap:${bootstrapVersion}"
  implementation "org.webjars:webjars-locator:${webjarsLocatorVersion}"
  implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
}

// TODO: webjar 사용시 webjars-locator 기능을 사용해보자, 괜히 버전 치환을 해서 복잡해지긴 했었음.
// test task가 섞이면 치환이 안된다.
// 테스트 같은 것은 별도로 먼저 돌려보고,
// `gradle clean appRun` 또는 `gradle clean appRunWar` 를 따로 실행해서 확인하자!

//import org.apache.tools.ant.filters.ReplaceTokens
//
//tasks.register('expandPropsWebapp', Copy) {
//  from 'src/main/webapp'
//  into "$buildDir/inplaceWebapp"
//  filesMatching(["**/*.html", "**/*.jsp"], {
//    filter(ReplaceTokens, tokens: [jqueryVersion: jqueryVersion, bootstrapVersion: bootstrapVersion, contextPath: "/" + project.name])
//  })
//  filteringCharset = 'UTF-8'
//}
//
//processResources {
//  dependsOn('expandPropsWebapp')
//}
//
//war {
//  webAppDirectory = file("$buildDir/inplaceWebapp")
//}


// gradle appRun 으로 실행
gretty {
  httpPort = 8090
  contextPath = project.name
  servletContainer = "tomcat10"
  jvmArgs = [
      "-Djava.security.egd=file:/dev/./urandom",
      "--add-opens=java.base/java.io=ALL-UNNAMED",
      "--add-opens=java.base/java.lang=ALL-UNNAMED",
      "--add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED"
  ]
}

test {
  useJUnitPlatform()
  testLogging {
    outputs.upToDateWhen { false }
    showStandardStreams = true
  }
}

kotlin {
  jvmToolchain(Integer.valueOf("${javaVersion}"))
}
