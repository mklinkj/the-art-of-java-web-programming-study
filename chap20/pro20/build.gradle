plugins {
  id 'java'
  id "io.freefair.lombok" version "${lombokPluginVersion}"
  id "org.gretty" version "${grettyVersion}"
  id 'war'
  id 'org.jetbrains.kotlin.jvm' version "${kotlinJvmPluginVersion}"
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of("${javaVersion}")
  }
}

compileJava.options.encoding = "${projectEncoding}"
compileTestJava.options.encoding = "${projectEncoding}"

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.springframework:spring-context:${springVersion}"
  implementation "org.springframework:spring-tx:${springVersion}"
  implementation "org.springframework:spring-jdbc:${springVersion}"
  implementation "org.springframework:spring-web:${springVersion}"

  implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
  implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}"

  implementation "commons-io:commons-io:${commonsIoVersion}"

  implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

  runtimeOnly "com.oracle.database.jdbc:ojdbc8:${ojdbcVersion}"

  runtimeOnly "com.mysql:mysql-connector-j:${mysqlConnectorJVersion}"

  implementation "org.mybatis:mybatis:${mybatisVersion}"
  implementation "org.mybatis:mybatis-spring:${mybatisSpringVersion}"

  implementation "com.zaxxer:HikariCP:${hikariCpVersion}"

  compileOnly "jakarta.servlet:jakarta.servlet-api:${jakartaServletApiVersion}"
  compileOnly "jakarta.servlet.jsp:jakarta.servlet.jsp-api:${jakartaServletJspApiVersion}"
  implementation "jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:${jakartaServletJspJstlApiVersion}"
  implementation "org.glassfish.web:jakarta.servlet.jsp.jstl:${jakartaServletJspJstlVersion}"

  implementation "net.sargue:java-time-jsptags:${javaTimeJspTagsVersion}"

  testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
  testImplementation "org.assertj:assertj-core:${assertJVersion}"
  testImplementation "net.javacrumbs.json-unit:json-unit-assertj:${jsonUnitAssertJVersion}"
  testImplementation "org.mockito:mockito-core:${mockitoVersion}"

  testRuntimeOnly "jakarta.servlet:jakarta.servlet-api:${jakartaServletApiVersion}"

  testImplementation "org.springframework:spring-test:${springVersion}"


  implementation "org.webjars:jquery:${jqueryVersion}"
  implementation "org.webjars:bootstrap:${bootstrapVersion}"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

import org.apache.tools.ant.filters.ReplaceTokens
tasks.register('expandPropsWebapp', Copy) {
  from 'src/main/webapp'
  into "$buildDir/inplaceWebapp"
  filesMatching(["**/*.html", "**/*.jsp"], {
    filter(ReplaceTokens, tokens: [jqueryVersion: jqueryVersion, bootstrapVersion: bootstrapVersion, contextPath: "/" + project.name])
  })
  filteringCharset = 'UTF-8'
}

war {
  webAppDirectory = file("$buildDir/inplaceWebapp")
}

processResources {
  dependsOn('expandPropsWebapp')
}

// gradle appRun 으로 실행
gretty {
  httpPort = 8090
  contextPath = project.name
  servletContainer = "tomcat10"
  inplaceMode = "soft"
  loggingLevel = "DEBUG"

  jvmArgs = [
      "--add-opens=java.base/java.io=ALL-UNNAMED",
      "--add-opens=java.base/java.lang=ALL-UNNAMED",
      "--add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED",
      "-Djava.security.egd=file:/dev/./urandom"
  ]
}

test {
  useJUnitPlatform()
  testLogging {
    outputs.upToDateWhen { false }
    showStandardStreams = true
  }
}
kotlin {
  jvmToolchain(Integer.valueOf("${javaVersion}"))
}
